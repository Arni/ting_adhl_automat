<?php
/**
 * @file
 * Enables the ADHL services to adhl automats.
 */

/**
 * Implements hook_menu().
 */
function ting_adhl_automat_menu() {
  $items = array();

  $items['ting/adhlautomat/ajax'] = array(
    'title' => 'Get ADHL recommedation',
    'page callback' => 'ting_adhl_automat_ajax',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['ting/adhlautomat/ajaxitem'] = array(
    'title' => 'Get Material by itemid',
    'page callback' => 'ting_adhl_automat_ajaxitem',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function ting_adhl_automat_ajaxitem() {
  $itemId = $_POST['itemId'];
  $data = alma_search_availability_holdings_item_id($itemId);
  $data  = array_shift($data);
  $output = array();
  $output['objectid'] = $data["local_id"];
  $output['title'] = '<div>' . $data["title"] . '</div>' ;
//  file_put_contents("/home/quickstart/work/debug/debugadhlautomat1.txt", print_r($data, TRUE), FILE_APPEND);
//  file_put_contents("/home/quickstart/work/debug/debugadhlautomat4.txt", print_r(array_shift($data), TRUE), FILE_APPEND);
  return drupal_json_output($output);
}


function ting_adhl_automat_ajax() {
  file_put_contents("/home/quickstart/work/debug/debugadhlautomat3.txt", print_r("ramt", TRUE), FILE_APPEND);
  try {
  $startTime1 = explode(' ', microtime());
  $output = '';
  $object_ids_string = $_POST['objectId'];
  if ($object_ids_string) {
    $object_ids = split(',', $object_ids_string);
    $startTime2 = explode(' ', microtime());
    $adhl_recommendations =  ting_adhl_automat_get_recommendations($object_ids);
    $stopTime2 = explode(' ', microtime());
    $time2 = floatval(($stopTime2[1]+$stopTime2[0]) - ($startTime2[1]+$startTime2[0]));
    if (is_array($adhl_recommendations) && !empty($adhl_recommendations)) {
      $startTime = explode(' ', microtime());
      $covers = ting_adhl_automat_check_covers($adhl_recommendations, 60);
              $stopTime = explode(' ', microtime());
        $time = floatval(($stopTime[1]+$stopTime[0]) - ($startTime[1]+$startTime[0]));
        //file_put_contents("/home/quickstart/work/debug/debugadhlautomat7.txt", print_r(round($time, 3), TRUE), FILE_APPEND);
      if (!empty($covers))
        $stopTime1 = explode(' ', microtime());
      $time1 = floatval(($stopTime1[1]+$stopTime1[0]) - ($startTime1[1]+$startTime1[0]));
        $output .= '<div>All' . round($time1, 3) .'</div>';
         $output .= '<div>Covers' . round($time, 3) .'</div>';
         $output .= '<div>Adhl' . round($time2, 3) .'</div>';
        $output .= ting_adhl_render_cover($covers);

        //ting_adhl_set_cache($covers, $object_id);
    }
  }
    } catch (Exception $e) {
      file_put_contents("/home/quickstart/work/debug/debugadhlautomat2.txt", print_r($e->getTraceAsString(), TRUE), FILE_APPEND);
    }

  return drupal_json_output($output);
}

function ting_adhl_automat_get_recommendations($object_ids) {
  $result_array = array();
  foreach ($object_ids as $object_id) {
    //$adhl_recommendations = ting_adhl_recommendations($object_id, 30);
    $adhl_recommendations = ting_adhl_automat_recommendations($object_id);
    foreach ($adhl_recommendations as $rank => $adhl_recommendation) {
      $adhl_recommendation->localId = $adhl_recommendation->lid;
      $adhl_recommendation->rank = 30 - $rank;
      $match = false;
      foreach ($result_array as $recommendation) {
        if ($adhl_recommendation->localId == $recommendation->localId) {
          $recommendation->rank += $adhl_recommendation->rank;
          $match = true;
          break;
        }
      }
      if (!$match) {
        $result_array[] = $adhl_recommendation;
      }
    }
    //file_put_contents("/home/quickstart/work/debug/debugadhlautomat.txt", print_r($adhl_recommendations, TRUE), FILE_APPEND);
  }
  //file_put_contents("/home/quickstart/work/debug/debugadhlautomat2.txt", print_r($result_array, TRUE), FILE_APPEND);
  uasort($result_array, 'ting_adhl_automat_sort');
  //file_put_contents("/home/quickstart/work/debug/debugadhlautomat4.txt", print_r($result_array, TRUE), FILE_APPEND);

  return $result_array;
}

/**
 * Helper function for sorting array according to rank.
 *
 * @param array $a
 *  Array containing holding count.
 * @param array $b
 *  Array containing holding count.
 * @return int
 *  A int indicating if element is before or after.
 */
function ting_adhl_automat_sort($a, $b) {
  if (!isset($a->rank )) {
    return 1;
  }
  if (!isset($b->rank )) {
    return -1;
  }
  if ($a->rank  == $b->rank ) {
    return 0;
  }
  return ($a->rank  < $b->rank ) ? 1 : -1;
}

function ting_adhl_automat_recommendations($faust) {
  $url = 'http://bibdata.solsort.com/bib/related/' . $faust;
  $json_adhl = ting_automat_get_by_curl($url);
  $adhl = json_decode($json_adhl);
  return $adhl;
}

function ting_adhl_automat_check_covers($covers_ids, $number_of_results) {
  $result_ids = array();
  $missing_images_local_ids = array();

  foreach ($covers_ids as $cover_id) {
    // Determine if the local id is a known negative.
    if (cache_get('ting_covers:' . $cover_id->localId, FALSE)) {
      continue;
    }

    $path = ting_covers_object_path($cover_id->localId);
    if (file_exists($path)) {
      $result_ids[$cover_id->localId] = $cover_id;
    } else {
      $missing_images_local_ids[] = (object) array(
          'localIdentifier' => $cover_id->localId,
          'libraryCode' => '773000',
          'object' => $cover_id
      );
    }
    if (count($result_ids) >= $number_of_results) {
      return $result_ids;
    }
  }
  $service = new AdditionalInformationService(variable_get('addi_wsdl_url'), variable_get('addi_username'), variable_get('addi_group'), variable_get('addi_password'));
  // Local ids = Faust numbers. Library object identifiers can be confusing.
  $additional_informations = $service->getByLocalIdentifier($missing_images_local_ids);

  foreach ($missing_images_local_ids as $local_id) {
    if (isset($additional_informations[$local_id->localIdentifier]) && $ai = $additional_informations[$local_id->localIdentifier]) {
      if ($ai->detailUrl) {
        $result_ids[$local_id->localIdentifier] = $local_id->object;
        ting_adhl_fetch_image(ting_covers_object_path($local_id->localIdentifier), $ai->detailUrl);
      } else if ($ai->thumbnailUrl) {
        $result_ids[$local_id->localIdentifier] = $local_id->object;
        ting_adhl_fetch_image(ting_covers_object_path($local_id->localIdentifier), $ai->thumbnailUrl);
      }
      if (count($result_ids) >= $number_of_results) {
        break;
      }
    }
  }
  return $result_ids;
}

//Developmentplatform has proxy
function ting_automat_get_by_curl ($url) {
$agent = 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.0.8) Gecko/2009032609 Firefox/3.0.8';
$curl_handle=curl_init();
curl_setopt($curl_handle, CURLOPT_PROXY, '172.18.0.30:8080');
curl_setopt($curl_handle, CURLOPT_RETURNTRANSFER, 1);
curl_setopt($curl_handle, CURLOPT_USERAGENT, $agent);
curl_setopt($curl_handle,CURLOPT_URL, $url);

return curl_exec($curl_handle);
}

